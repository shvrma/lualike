module;

#include <cstdint>
#include <exception>
#include <expected>
#include <generator>
#include <unordered_map>
#include <vector>

export module lualike.interpreter;

export import lualike.lexer;

namespace lexer = lualike::lexer;
namespace token = lualike::token;
namespace value = lualike::value;

export namespace lualike::interpreter {

enum class InterpreterErrKind : uint8_t {
  kUnknownName,
  kExpectedStatementBeginning,
  kExpectedExpression,
  kUnclosedParanthesis,
  kRedeclarationOfLocalVariable,
  kExpectedAssignmentOrFuncCall,
  kExpectedEndKeywordAfterFuncBody,

  kUnexpectedEOF,

  // Something was unhandled. Normally should not happen.
  kInternalException,

  kSyntaxError,
};

struct InterpreterErr : std::exception {
  InterpreterErrKind error_kind;
  std::variant<std::monostate, std::exception, lexer::LexerErr> error;

  explicit InterpreterErr(InterpreterErrKind error_kind) noexcept
      : error_kind(error_kind) {}

  explicit InterpreterErr(const std::exception& exception) noexcept
      : error_kind(InterpreterErrKind::kInternalException), error(exception) {}

  explicit InterpreterErr(const lexer::LexerErr& lexer_err) noexcept
      : error_kind(InterpreterErrKind::kSyntaxError), error(lexer_err) {}

  const char* what() const noexcept override {
    return "Interpreter error occured!";
  }
};

std::unordered_map<std::string, value::LualikeValue> MakeDefaultGlobalEnv();

using lexer::InputTRequirements;

template <typename InputT>
  requires InputTRequirements<InputT>
class Interpreter {
  lexer::TokensRangeT tokens_r_;
  std::ranges::const_iterator_t<lexer::TokensRangeT> iter_ =
      std::ranges::cbegin(tokens_r_);
  std::ranges::const_sentinel_t<lexer::TokensRangeT> sentinel_ =
      std::ranges::cend(tokens_r_);
  bool read_only = false;

  std::unordered_map<std::string, value::LualikeValue> local_names_;
  std::unordered_map<std::string, value::LualikeValue> global_names_;

  value::LualikeValue ReadExpressionAtom();
  // TODO(shvrma): replace magic constant.
  value::LualikeValue ReadExpression(int min_precedence = 1);
  // Expect curent token to be the name and several other to form a assigment
  // statement.
  void ReadName(bool is_local_decl);
  std::vector<token::Token> ReadFunctionBody();
  std::optional<value::LualikeValue> ReadBlock();

 public:
  explicit Interpreter(InputT&& input,
                       std::unordered_map<std::string, value::LualikeValue>&&
                           global_names = MakeDefaultGlobalEnv())
      : tokens_r_(lexer::ReadTokens(std::move(input))),
        global_names_(std::move(global_names)) {}

  std::expected<value::LualikeValue, InterpreterErr>
  EvaluateExpression() noexcept;
  std::expected<std::optional<value::LualikeValue>, InterpreterErr>
  Interpret() noexcept;
};

}  // namespace lualike::interpreter
