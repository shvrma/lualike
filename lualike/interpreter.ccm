module;

#include <cstdint>
#include <exception>
#include <expected>
#include <generator>
#include <memory>
#include <optional>
#include <print>
#include <unordered_map>
#include <utility>
#include <variant>

export module lualike.interpreter;

export import lualike.lexer;

using lualike::lexer::LexerErr;
using lualike::token::Token;
using lualike::token::TokenKind;
using lualike::value::LualikeValue;

namespace lualike::interpreter {

export enum class InterpreterErrKind : uint8_t {
  kUnknownName,
  kExpected,
  kExpectedExpression,
  kUnclosedParenthesis,
  kRedeclarationOfLocalVariable,
  kExpectedAssignmentOrFuncCall,

  // Something was unhandled. Normally should not happen.
  kInternalException,

  kSyntaxError,
};

export struct InterpreterErr : std::exception {
  InterpreterErrKind error_kind;
  std::variant<std::monostate, TokenKind, std::exception, LexerErr> error;

  explicit InterpreterErr(InterpreterErrKind error_kind) noexcept
      : error_kind(error_kind) {}

  explicit InterpreterErr(const std::exception& exception) noexcept
      : error_kind(InterpreterErrKind::kInternalException), error(exception) {}

  explicit InterpreterErr(const LexerErr& lexer_err) noexcept
      : error_kind(InterpreterErrKind::kSyntaxError), error(lexer_err) {}

  explicit InterpreterErr(TokenKind expected) noexcept
      : error_kind(InterpreterErrKind::kExpected), error(expected) {}

  const char* what() const noexcept override {
    return "Interpreter error occurred!";
  }
};

export class Interpreter {
  using TokensRangeT = std::generator<const Token&>;

  std::ranges::const_iterator_t<TokensRangeT> iter_;
  std::ranges::const_sentinel_t<TokensRangeT> sentinel_;
  bool read_only = false;

  using NamesT = std::unordered_map<std::string, LualikeValue>;

  NamesT local_names_;
  std::shared_ptr<NamesT> global_names_;

  LualikeValue ReadExpressionAtom();
  // TODO(shvrma): replace magic constant.
  LualikeValue ReadExpression(int min_precedence = 1);
  // Pre: current token to be the name and several other to form a assignment
  // statement.
  void ReadName(bool is_local_decl);
  std::optional<LualikeValue> ReadBlock();
  std::vector<Token> CollectBlockTill(
      std::initializer_list<TokenKind> end_tokens, bool should_discard = false);
  // Pre: if keyword has been read.
  std::optional<LualikeValue> ReadIfElseStatement();

  void ExpectToken(TokenKind expected_token_kind) {
    if (iter_ == sentinel_) {
      throw InterpreterErr(InterpreterErrKind::kExpected);
    }

    if (const auto& token = *iter_; token.token_kind != expected_token_kind) {
      throw InterpreterErr(token.token_kind);
    }

    iter_++;
  }

  explicit Interpreter(TokensRangeT& tokens_r,
                       std::shared_ptr<NamesT> global_names)
      : iter_(std::ranges::cbegin(tokens_r)),
        sentinel_(std::ranges::cend(tokens_r)),
        global_names_(std::move(global_names)) {}

 public:
  template <std::ranges::view InputT>
  friend std::expected<std::optional<LualikeValue>, InterpreterErr> Interpret(
      InputT input) noexcept;
};

// NOLINTBEGIN(readability-redundant-declaration)
export template <std::ranges::view InputT>
std::expected<std::optional<LualikeValue>, InterpreterErr> Interpret(
    InputT input) noexcept;
// NOLINTEND(readability-redundant-declaration)

}  // namespace lualike::interpreter
