module;

#include <cstdint>
#include <generator>
#include <ranges>

export module lualike.lexer;

export import lualike.token;

using lualike::token::kKeywordsMap;
using lualike::token::kOtherSingleCharTokensMap;
using lualike::token::kOtherTwoCharTokensMap;
using lualike::token::Token;
using lualike::token::TokenKind;
using lualike::value::LualikeValue;

namespace lualike::lexer {

export enum class LexerErrKind : uint8_t {
  kTooLongToken,

  kInvalidNumber,
  kInvalidName,
  kInvalidString,

  kInvalidSymbol,
};

export struct LexerErr : std::exception {
  LexerErrKind error_kind;

  explicit LexerErr(LexerErrKind error_kind) noexcept
      : error_kind(error_kind) {}
};

export template <std::ranges::view InputT>
std::generator<const Token&> ReadTokens(InputT input);

template <std::ranges::view InputT>
class Lexer {
  std::ranges::const_iterator_t<InputT> iter_;
  std::ranges::const_sentinel_t<InputT> sentinel_;

  std::string token_data_accumulator_;

  // Pre: single alphabetic symbol or underscore in accumulator.
  Token ReadAlphanumeric();
  // Pre: accumulator is empty and delimiter is got
  Token ReadShortLiteralString(char delimiter);
  // Pre: single digit is in accumulator.
  Token ReadNumericConstant();

 public:
  explicit Lexer(InputT input)
      : iter_(std::ranges::cbegin(input)),
        sentinel_(std::ranges::cend(input)) {}

  const int kMaxOutputAccumLength = 16;

  std::optional<Token> NextToken();
};

}  // namespace lualike::lexer
