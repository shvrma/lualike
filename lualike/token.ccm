module;

#include <cstdint>
#include <optional>
#include <string_view>
#include <unordered_map>

export module lualike.token;

export namespace lualike::token {

enum class TokenKind : uint8_t {
  kNone,

  kName,  // Same as identifier
  kStringLiteral,
  kIntLiteral,
  kFloatLiteral,

  kKeywordAnd,
  kKeywordBreak,
  kKeywordDo,
  kKeywordElse,
  kKeywordElseif,
  kKeywordEnd,
  kKeywordFalse,
  kKeywordFor,
  kKeywordFunction,
  kKeywordGoto,
  kKeywordIf,
  kKeywordIn,
  kKeywordLocal,
  kKeywordNil,
  kKeywordNot,
  kKeywordOr,
  kKeywordRepeat,
  kKeywordReturn,
  kKeywordThen,
  kKeywordTrue,
  kKeywordUntil,
  kKeywordWhile,

  kOtherPlus,
  kOtherMinus,
  kOtherAsterisk,
  kOtherSlash,
  kOtherPercent,
  kOtherCaret,  // ^
  kOtherDoubleSlash,
  kOtherDoubleEqual,
  kOtherTildeEqual,  // ~=
  kOtherLessThanEqual,
  kOtherGreaterThanEqual,
  kOtherLessThan,
  kOtherGreaterThan,
  kOtherEqual,
  kOtherLeftParenthesis,
  kOtherRightParenthesis,
  kOtherLeftFigureBracket,
  kOtherRightFigureBracket,
  kOtherLeftSquareBracket,
  kOtherRightSquareBracket,
  kOtherSemicolon,
  kOtherColon,
  kOtherComma,
  kOtherDot,
};

struct Token {
  TokenKind token_kind;
  std::optional<std::string_view> token_data;
  int span_start = -1;
  int span_end = -1;

  bool operator==(const Token &rhs) const = default;
};

const std::unordered_map<std::string_view, TokenKind> kKeywordsMap = {
    {"and", TokenKind::kKeywordAnd},
    {"break", TokenKind::kKeywordBreak},
    {"do", TokenKind::kKeywordDo},
    {"else", TokenKind::kKeywordElse},
    {"elseif", TokenKind::kKeywordElseif},
    {"end", TokenKind::kKeywordEnd},
    {"false", TokenKind::kKeywordFalse},
    {"for", TokenKind::kKeywordFor},
    {"function", TokenKind::kKeywordFunction},
    {"goto", TokenKind::kKeywordGoto},
    {"if", TokenKind::kKeywordIf},
    {"in", TokenKind::kKeywordIn},
    {"local", TokenKind::kKeywordLocal},
    {"nil", TokenKind::kKeywordNil},
    {"not", TokenKind::kKeywordNot},
    {"or", TokenKind::kKeywordOr},
    {"repeat", TokenKind::kKeywordRepeat},
    {"return", TokenKind::kKeywordReturn},
    {"then", TokenKind::kKeywordThen},
    {"true", TokenKind::kKeywordTrue},
    {"until", TokenKind::kKeywordUntil},
    {"while", TokenKind::kKeywordWhile},
};

const std::unordered_map<char, TokenKind> kOtherSingleCharTokensMap = {
    {'+', TokenKind::kOtherPlus},
    {'-', TokenKind::kOtherMinus},
    {'*', TokenKind::kOtherAsterisk},
    {'/', TokenKind::kOtherSlash},
    {'%', TokenKind::kOtherPercent},
    {'^', TokenKind::kOtherCaret},
    {'<', TokenKind::kOtherLessThan},
    {'>', TokenKind::kOtherGreaterThan},
    {'=', TokenKind::kOtherEqual},
    {'(', TokenKind::kOtherLeftParenthesis},
    {')', TokenKind::kOtherRightParenthesis},
    {';', TokenKind::kOtherSemicolon},
    {',', TokenKind::kOtherComma},
};

const std::unordered_map<std::string_view, TokenKind> kOtherTwoCharTokensMap = {
    {"//", TokenKind::kOtherDoubleSlash},
    {"==", TokenKind::kOtherDoubleEqual},
    {"~=", TokenKind::kOtherTildeEqual},
    {"<=", TokenKind::kOtherLessThanEqual},
    {">=", TokenKind::kOtherGreaterThanEqual},
};

}  // namespace lualike::token
