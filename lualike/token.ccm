module;

#include <cstdint>
#include <variant>

#include "frozen/string.h"
#include "frozen/unordered_map.h"

export module lualike.token;

export import lualike.value;

using lualike::value::LualikeValue;

export namespace lualike::token {

enum class TokenKind : uint8_t {
  kNone,

  kName,  // Same as identifier
  kLiteral,

  kKeywordAnd,
  kKeywordBreak,
  kKeywordDo,
  kKeywordElse,
  kKeywordElseif,
  kKeywordEnd,
  kKeywordFalse,
  kKeywordFor,
  kKeywordFunction,
  kKeywordGoto,
  kKeywordIf,
  kKeywordIn,
  kKeywordLocal,
  kKeywordNil,
  kKeywordNot,
  kKeywordOr,
  kKeywordRepeat,
  kKeywordReturn,
  kKeywordThen,
  kKeywordTrue,
  kKeywordUntil,
  kKeywordWhile,

  kOtherPlus,
  kOtherMinus,
  kOtherAsterisk,
  kOtherSlash,
  kOtherPercent,
  kOtherCaret,  // ^
  kOtherDoubleSlash,
  kOtherDoubleEqual,
  kOtherTildeEqual,  // ~=
  kOtherLessThanEqual,
  kOtherGreaterThanEqual,
  kOtherLessThan,
  kOtherGreaterThan,
  kOtherEqual,
  kOtherLeftParenthesis,
  kOtherRightParenthesis,
  kOtherLeftFigureBracket,
  kOtherRightFigureBracket,
  kOtherLeftSquareBracket,
  kOtherRightSquareBracket,
  kOtherSemicolon,
  kOtherColon,
  kOtherComma,
  kOtherDot,
};

struct Token {
  TokenKind token_kind;
  std::variant<std::monostate, std::string, LualikeValue> token_data;

  bool operator==(const Token &rhs) const = default;
};

constexpr auto kKeywordsMap =
    frozen::make_unordered_map<frozen::string, TokenKind>({
        {"and", TokenKind::kKeywordAnd},
        {"break", TokenKind::kKeywordBreak},
        {"do", TokenKind::kKeywordDo},
        {"else", TokenKind::kKeywordElse},
        {"elseif", TokenKind::kKeywordElseif},
        {"end", TokenKind::kKeywordEnd},
        {"false", TokenKind::kKeywordFalse},
        {"for", TokenKind::kKeywordFor},
        {"function", TokenKind::kKeywordFunction},
        {"goto", TokenKind::kKeywordGoto},
        {"if", TokenKind::kKeywordIf},
        {"in", TokenKind::kKeywordIn},
        {"local", TokenKind::kKeywordLocal},
        {"nil", TokenKind::kKeywordNil},
        {"not", TokenKind::kKeywordNot},
        {"or", TokenKind::kKeywordOr},
        {"repeat", TokenKind::kKeywordRepeat},
        {"return", TokenKind::kKeywordReturn},
        {"then", TokenKind::kKeywordThen},
        {"true", TokenKind::kKeywordTrue},
        {"until", TokenKind::kKeywordUntil},
        {"while", TokenKind::kKeywordWhile},
    });

constexpr auto kOtherSingleCharTokensMap =
    frozen::make_unordered_map<char, TokenKind>({
        {'+', TokenKind::kOtherPlus},
        {'-', TokenKind::kOtherMinus},
        {'*', TokenKind::kOtherAsterisk},
        {'/', TokenKind::kOtherSlash},
        {'%', TokenKind::kOtherPercent},
        {'^', TokenKind::kOtherCaret},
        {'<', TokenKind::kOtherLessThan},
        {'>', TokenKind::kOtherGreaterThan},
        {'=', TokenKind::kOtherEqual},
        {'(', TokenKind::kOtherLeftParenthesis},
        {')', TokenKind::kOtherRightParenthesis},
        // {'{', TokenKind::kOtherLeftFigureBracket},
        // {'}', TokenKind::kOtherRightFigureBracket},
        // {'[', TokenKind::kOtherLeftSquareBracket},
        // {']', TokenKind::kOtherRightSquareBracket},
        {';', TokenKind::kOtherSemicolon},
        // {':', TokenKind::kOtherColon},
        {',', TokenKind::kOtherComma},
        // {'.', TokenKind::kOtherDot},
    });

constexpr auto kOtherTwoCharTokensMap =
    frozen::make_unordered_map<frozen::string, TokenKind>({
        {"//", TokenKind::kOtherDoubleSlash},
        {"==", TokenKind::kOtherDoubleEqual},
        {"~=", TokenKind::kOtherTildeEqual},
        {"<=", TokenKind::kOtherLessThanEqual},
        {">=", TokenKind::kOtherGreaterThanEqual},
    });

}  // namespace lualike::token
